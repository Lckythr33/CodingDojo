package com.ztech.logandreg.controllers;

import java.util.List;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.ztech.logandreg.models.Course;
import com.ztech.logandreg.models.User;
import com.ztech.logandreg.services.CourseService;
import com.ztech.logandreg.services.UserService;
import com.ztech.logandreg.validator.UserValidator;

@Controller
public class UserCtrl {
    private final UserService userService;
    
    @GetMapping("/")
    public String index() {
    	return "redirect:/registration";
    }
    
    @RequestMapping("/registration")
    public String registerForm(@ModelAttribute("user") User user) {
        return "registrationPage.jsp";
    }
    @RequestMapping("/login")
    public String login() {
        return "registrationPage.jsp";
    }
    
    // NEW
    private final UserValidator userValidator;
    
    // NEW
    public UserCtrl(UserService userService, UserValidator userValidator) {
        this.userService = userService;
        this.userValidator = userValidator;
    }
    
    @RequestMapping(value="/registration", method=RequestMethod.POST)
    public String registerUser(@Valid @ModelAttribute("user") User user, BindingResult result, HttpSession session, Model model) {
    	userValidator.validate(user, result);
    	// if result has errors, return the registration page (don't worry about validations just now)
    	if(result.hasErrors()) {
    		return "registrationPage.jsp";
    
    	}
        // else, save the user in the database, save the user id in session, and redirect them to the /home route
    	User u = userService.registerUser(user);
    	session.setAttribute("userId", u.getId()); // add users ID to session
    	return "redirect:/home";
    }
    
    @RequestMapping(value="/login", method=RequestMethod.POST)
    public String loginUser(@RequestParam("email") String email, @RequestParam("password") String password, Model model, @ModelAttribute("user") User user, HttpSession session) {
		// if the user is authenticated, save their user id in session
		boolean isAuth = userService.authenticateUser(email, password);
		if(isAuth) {
			User u = userService.findByEmail(email);
			session.setAttribute("userId", u.getId()); 
			return "redirect:/courses";
		}
        // else, add error messages and return the login page
		model.addAttribute("error", "Invalid Credentials!");
		return "registrationPage.jsp";
    }
    
//    @RequestMapping("/home")
//    public String home(HttpSession session, Model model) {
//		Long userId = (Long) session.getAttribute("userId");
//        // get user from session, save them in the model and return the home page
//		User u = userService.findUserById(userId);
//		model.addAttribute("user", u);
//		return "homePage.jsp";
//
//    }
    
    @RequestMapping("/logout")
    public String logout(HttpSession session) {
        // invalidate session
    	session.invalidate();
        // redirect to login page
    	return "redirect:/registration";
    }
    
    //Course CTRL
    
    @Autowired
    private CourseService cS;
    
 // display homepage
 	@RequestMapping("/courses")
 	public String homepage(HttpSession session, Model model) {

 		// if current user is in session then proceed, if not redirect to login page
 		if (session.getAttribute("userId") != null) {
 			// get user from session, save them in the model and return the home page
 			Long userId = (Long) session.getAttribute("userId");
 			User u = userService.findUserById(userId);

 			// model pass u user to jsp in order to display current user login name
 			model.addAttribute("user", u);

 			// render courses in table

 			List<Course> courseList = cS.findAllCourses();
 			model.addAttribute("courses", courseList);
 			return "homePage.jsp";

 		} else {
 			System.out.println("You have not logined");
 			return "redirect:/";
 		}
 	}

 	// Render course creation page
 	@RequestMapping("/courses/new")
 	public String courseCreation(@ModelAttribute("course") Course myCourse) {
 		return "course.jsp";
 	}

 	// Create Course
 	@PostMapping("/courses/new")
 	public String createCourse(@Valid @ModelAttribute("course") Course myCourse, BindingResult result) {
 		if (result.hasErrors()) {

 			System.out.println("Error while creating course");
 			return "course.jsp";
 		} else {
 			System.out.println("------- Create course ------");
 			cS.createCourse(myCourse);
 			return "redirect:/courses";
 		}
 	}

 	// display course information
 	@RequestMapping("courses/{id}")
 	public String displayCourse(@PathVariable("id") Long myId, Model model, HttpSession session) {
 		Course myCourse = cS.findCourseById(myId);
 		model.addAttribute("course", myCourse);

 		List<User> users = myCourse.getUsers();
 		Long userId = (Long) session.getAttribute("userId");
 		User u = userService.findUserById(userId);
 		model.addAttribute("currentUser",u);
 		System.out.println("--get id-- "+u.getId());
 		return "courseinfo.jsp";
 	}

 	// add user to a course
 	@RequestMapping("/courses/add/{id}")
 	public String addCourse(@PathVariable("id") Long myId, Model model, HttpSession session) {
 		Long userId = (Long) session.getAttribute("userId");
 		User u = userService.findUserById(userId);
 		Course course = cS.findCourseById(myId);
 		
 		u.getCourses().add(course);
 		userService.updateUser(u);
 		
 		
 		return "redirect:/courses";
 	}

 	
 	// edit page
 	@RequestMapping("/courses/{id}/edit")
 	public String editPage(@ModelAttribute("course") Course myCourse, @PathVariable("id") Long myId, Model model) {
 		Course course = cS.findCourseById(myId);
 		model.addAttribute("course", course);
 		return "edit.jsp";
 	}

 	// update course
 	@PostMapping("/courses/update")
 	public String updateCourse(@Valid @ModelAttribute("course") Course myCourse, BindingResult result) {
 		if (result.hasErrors()) {
 			return "edit.jsp";
 		} else {
 			List<User> myStudents =myCourse.getUsers();
 			System.out.println("--- all students --- "+ myStudents);
// 			myCourse.setUsers(myStudents);
 			cS.updateCourse(myCourse);
 			
 			return "redirect:/courses";
 		}
 	}

 	// Delete Course
 	@RequestMapping("/courses/delete/{id}")
 	public String deleteCourse(@PathVariable("id") Long id) {
 		Course myCourse = cS.findCourseById(id);
 		if (myCourse != null) {
 			cS.deleteCourse(myCourse);
 			return "redirect:/courses";
 		} else {
 			System.out.println("Course doesn't exist");
 			return "redirect:/courses";
 		}

 	}

 	// remove a current login user from a course
 	// add user to a course
 	@RequestMapping("/courses/{id}/remove")
 	public String removeUserFromCourse(@PathVariable("id") Long myId, Model model, HttpSession session) {
 		Long userId = (Long) session.getAttribute("userId");
 		User u = userService.findUserById(userId);
 		Course course = cS.findCourseById(myId);
 		
 		u.getCourses().remove(course);
 		userService.updateUser(u);
 		
 		return "redirect:/courses";
 	}
 	
 	//add a current login user to a course (in display course info page)
 	@RequestMapping("/courses/{id}/add")
 		public String addUserToCourse(@PathVariable("id") Long myId, Model model, HttpSession session) {
 			Long userId = (Long) session.getAttribute("userId");
 			User u = userService.findUserById(userId);
 			Course course = cS.findCourseById(myId);
 			
 			u.getCourses().add(course);
 			userService.updateUser(u);
 			
 			return "redirect:/courses";
 		}
 	
}